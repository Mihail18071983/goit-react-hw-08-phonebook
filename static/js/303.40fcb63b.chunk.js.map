{"version":3,"file":"static/js/303.40fcb63b.chunk.js","mappings":"qRAWMA,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,GACG,oBACPC,MAAM,uBACNC,SAAS,qBACZC,SAAUH,EAAAA,GACA,uBACPI,IAAI,EAAG,qDACPF,SAAS,0BAkDd,EA/CkB,WAChB,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbR,MAAO,GACPE,SAAU,IAEZJ,iBAAkBA,EAClBW,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBP,GAASQ,EAAAA,EAAAA,IAAMF,IACfC,GACD,IAGH,OACE,SAACE,EAAA,EAAD,CAAKC,OAAQ,EAAb,UACE,kBAAML,SAAUH,EAAOS,aAAvB,WACE,SAACC,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,MAAOf,EAAOI,OAAOV,MACrBsB,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOmB,QAAQzB,OAAS0B,QAAQpB,EAAOqB,OAAO3B,OAC7C4B,WAAYtB,EAAOmB,QAAQzB,OAASM,EAAOqB,OAAO3B,MAClDc,OAAO,WAEjB,SAACE,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNS,KAAK,WACLR,MAAOf,EAAOI,OAAOR,SACrBoB,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOmB,QAAQvB,UAAYwB,QAAQpB,EAAOqB,OAAOzB,UAChD0B,WAAYtB,EAAOmB,QAAQvB,UAAYI,EAAOqB,OAAOzB,YAEzD,SAAC4B,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYf,WAAS,EAACY,KAAK,SAASI,MAAO,CAAEC,UAAW,IAAxF,wBAMb,E,oBChDD,EAbkB,WAEhB,OADmBC,EAAAA,EAAAA,IAAYC,EAAAA,KAEtB,SAAC,KAAD,CAAUC,GAAG,eAGpB,iCACE,wCACA,SAAC,EAAD,MAGL,C","sources":["modules/LoginForm/LoginForm.jsx","Pages/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nimport { logIn } from 'redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\n\n\nconst validationSchema = yup.object({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(6, 'Password should be of minimum 6 characters length')\n    .required('Password is required'),\n});\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values, { resetForm }) => {\n      dispatch(logIn(values))\n      resetForm();\n    },\n  });\n\n  return (\n    <Box margin={1}>\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          fullWidth\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n                  helperText={formik.touched.email && formik.errors.email}\n                  margin='dense'\n        />\n        <TextField\n          fullWidth\n          id=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n                  helperText={formik.touched.password && formik.errors.password}\n        />\n              <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\" style={{ marginTop: 10 }}>\n          Submit\n        </Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'modules/LoginForm/LoginForm';\n\nimport { selectIsLoggedIn } from 'redux/auth/auth-selectors';\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nconst LoginPage = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  if (isLoggedIn) {\n    return <Navigate to=\"/contacts\" />;\n  }\n  return (\n    <>\n      <h1>Login page</h1>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default LoginPage;\n"],"names":["validationSchema","yup","email","required","password","min","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","resetForm","logIn","Box","margin","handleSubmit","TextField","fullWidth","id","name","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","Button","color","variant","style","marginTop","useSelector","selectIsLoggedIn","to"],"sourceRoot":""}